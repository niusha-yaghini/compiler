# Generated from D:/1402 - 2/compiler/Assignment/compiler/HW1/Simple-Calculator/grammar/ArithmeticExpression.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,83,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,5,7,
        44,8,7,10,7,12,7,47,9,7,1,7,1,7,1,8,4,8,52,8,8,11,8,12,8,53,1,8,
        1,8,1,9,1,9,1,10,1,10,5,10,62,8,10,10,10,12,10,65,9,10,1,11,5,11,
        68,8,11,10,11,12,11,71,9,11,1,11,1,11,4,11,75,8,11,11,11,12,11,76,
        1,12,4,12,80,8,12,11,12,12,12,81,1,45,0,13,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,4,3,0,9,9,13,13,32,
        32,3,0,44,44,65,90,97,122,4,0,44,44,48,57,65,90,97,122,1,0,48,57,
        88,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,
        11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
        21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,
        31,1,0,0,0,7,33,1,0,0,0,9,35,1,0,0,0,11,37,1,0,0,0,13,39,1,0,0,0,
        15,41,1,0,0,0,17,51,1,0,0,0,19,57,1,0,0,0,21,59,1,0,0,0,23,69,1,
        0,0,0,25,79,1,0,0,0,27,28,5,61,0,0,28,2,1,0,0,0,29,30,5,43,0,0,30,
        4,1,0,0,0,31,32,5,45,0,0,32,6,1,0,0,0,33,34,5,42,0,0,34,8,1,0,0,
        0,35,36,5,47,0,0,36,10,1,0,0,0,37,38,5,40,0,0,38,12,1,0,0,0,39,40,
        5,41,0,0,40,14,1,0,0,0,41,45,5,34,0,0,42,44,9,0,0,0,43,42,1,0,0,
        0,44,47,1,0,0,0,45,46,1,0,0,0,45,43,1,0,0,0,46,48,1,0,0,0,47,45,
        1,0,0,0,48,49,5,34,0,0,49,16,1,0,0,0,50,52,7,0,0,0,51,50,1,0,0,0,
        52,53,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,55,1,0,0,0,55,56,6,
        8,0,0,56,18,1,0,0,0,57,58,5,10,0,0,58,20,1,0,0,0,59,63,7,1,0,0,60,
        62,7,2,0,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,
        0,64,22,1,0,0,0,65,63,1,0,0,0,66,68,7,3,0,0,67,66,1,0,0,0,68,71,
        1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,69,1,0,0,0,
        72,74,5,46,0,0,73,75,7,3,0,0,74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,
        0,0,0,76,77,1,0,0,0,77,24,1,0,0,0,78,80,7,3,0,0,79,78,1,0,0,0,80,
        81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,26,1,0,0,0,8,0,45,53,61,
        63,69,76,81,1,6,0,0
    ]

class ArithmeticExpressionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    ADD = 2
    SUB = 3
    MUL = 4
    DIV = 5
    LPAREN = 6
    RPAREN = 7
    STRING = 8
    WS = 9
    NEWLINE = 10
    ID = 11
    FLOAT = 12
    INTEGER = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "SUB", "MUL", "DIV", "LPAREN", "RPAREN", "STRING", "WS", 
            "NEWLINE", "ID", "FLOAT", "INTEGER" ]

    ruleNames = [ "T__0", "ADD", "SUB", "MUL", "DIV", "LPAREN", "RPAREN", 
                  "STRING", "WS", "NEWLINE", "ID", "FLOAT", "INTEGER" ]

    grammarFileName = "ArithmeticExpression.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


